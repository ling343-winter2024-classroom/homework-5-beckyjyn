---
title: "Homework5"
author: Becky Jin
date: April 16, 2024
format: html
editor: visual
embed-resources: true
---

```{r}
options(repos = c(CRAN = "https://cloud.r-project.org"))
#| warning: false
library(tidyverse)
library(here)
install.packages("knitr")
install.packages("kableExtra")
library(knitr)
library(kableExtra)
library(tibble)
install.packages("gt")
library(gt)
install.packages("ggplot2")
install.packages("plotly")
library(ggplot2)
library(plotly)

```

## Importing Data

```{r}
here::i_am("analysis/homework5-beckyjyn.qmd")
df_all <- read.csv(here("data/delong maze 40Ss.csv"), 
              header = 1, sep = ",", comment.char = "#", strip.white = T,
              col.names = c("Index","Time","Counter","Hash","Owner","Controller","Item","Element","Type","Group","FieldName","Value","WordNum","Word","Alt","WordOn","CorrWord","RT","Sent","TotalTime","Question","Resp","Acc","RespRT"))
```

## Extract Reaction time

```{r}
df_rt <- df_all |> 
  filter(Controller == "Maze" & !str_detect(Type, "prac")) |> 
  select(1:10, 13:20) |> 
  separate(col = Type, 
           into = c("exp", "item", "expect", "position", "pos", 
                    "cloze", "art.cloze", "n.cloze"), 
           sep = "\\.", convert = TRUE, fill = "right") |> 
  mutate(WordNum = as.numeric(WordNum),
         Acc = as.numeric(as.character(recode(CorrWord, yes = "1", no = "0"))),
         n.cloze.scale =  scale(n.cloze), 
         art.cloze.scale = scale(art.cloze)) |> 
  mutate(across(where(is.character), as.factor)) |> 
  filter(item != 29) |> 
  filter(Hash != "9dAvrH0+R6a0U5adPzZSyA")
```

```{r}
rt.s <- df_rt 
rt.s$rgn.fix <- rt.s$WordNum - rt.s$pos + 1
rt.s$word.num.z <- scale(rt.s$WordNum)
rt.s$word.len <- nchar(as.character(rt.s$Word))
rt.s$Altword.len <- nchar(as.character(rt.s$Alt))
# simplying by using dummy/treatment coding instead of sum coding
# 'expected' will be reference level
#contrasts(rt.s$expect) <- c(-.5,.5)

rt.s$item.expect <- paste(rt.s$item, rt.s$expect, sep=".")
rt.s.filt <- rt.s[rt.s$Hash != "gyxidIf0fqXBM7nxg2K7SQ" & rt.s$Hash != "f8dC3CkleTBP9lUufzUOyQ",]

rgn.rt.raw <- rt.s.filt %>%
  filter(rgn.fix > -4 & rgn.fix < 5) %>%
  filter(Acc == 1) %>%
  group_by(rgn.fix, expect) %>%
  summarize(n = n(), 
            subj = length(unique(Hash)), 
            rt = mean(RT), 
            sd = sd(RT), 
            stderr = sd / sqrt(subj)) %>%
  as.data.frame()
rgn.rt.raw$rgn <- as.factor(recode(rgn.rt.raw$rgn.fix, "-3"="CW-3", "-2"="CW-2", "-1"="CW-1", "0"="art", "1"="n","2"="CW+1", "3"="CW+2", "4"="CW+3"))
rgn.rt.raw$rgn <- ordered(rgn.rt.raw$rgn, levels = c("CW-3", "CW-2", "CW-1", "art", "n", "CW+1", "CW+2", "CW+3"))
```

```{r}
rt.s.filt %>% 
  filter(rgn.fix == 0) %>% 
  group_by(Hash, expect) %>% 
  summarize(RT = mean(RT, na.rm = TRUE)) %>% 
  group_by(expect) %>% 
  summarize(RT = mean(RT, na.rm = TRUE)) %>% 
  gt() %>% 
  fmt_number(decimals = 2)
```

```{r}
set.seed(343)
p_parts <- rt.s.filt |> 
  filter(rgn.fix == 0) |> 
  group_by(Hash, expect) |> 
  summarize(RT = mean(RT, na.rm = TRUE)) |> 
  ggplot(aes(x=expect, y=RT, color = expect)) +
  geom_jitter(stat = "identity", width = .1, alpha = .8) +
  geom_point(stat = "summary", fun = mean, 
             shape = 4, color = "blue", size = 4) +
  labs(x = "Condition", y = "Reading Time (msec)") + 
  theme_bw()  
ggplotly(p_parts)
```

## Describe the study

This study concentrates on investigating how English speakers predict following phonological forms based on grammatical and phonetic cues, using the choice between articles "a" and "an" as an instance. Whether "a" or "an" is required depends on the initial sound of the word that follows the article. Usually, words that begin a vowel sound would need "an" while the ones that begin with a consonant would rather need "a".

## Data Dictionary

These are the variables in the raw data.

```{r}
df_all_col_names <- colnames(df_all)
not_na_counts <- sapply(df_all, function(x) sum(!is.na(x)))
data_dictionary <- tibble(Variable = df_all_col_names, Valid_cnts = not_na_counts)
print(data_dictionary)
variable_explained <- tribble(
  ~Essential_Variable, ~Description,
  "Hash", "hash key of each participant",
  "Owner", "whether the participant is experiment owner or not",
  "Controller", "{Form|Maze|Question}",
  "Item", "sentence item index",
  "Type", "type of the given task",
  "Group", "group of the given stimuli",
  "Word", "original word in sentence",
  "Alt", "word alternative to the original word",
  "WordOn", "boolean value that determines the word is which of the above two types",
  "CorrWord", "if the word is correct or incorrect",
  "RT", "response time",
  "Sent", "the complete sentence",
  "TotalTime", "time taken for a correct response",
  "Question", "comprehension question", 
  "Resp", "participant's response to the above question",
  "Acc", "reponse is correctly accepted or not",
  "RespRT", "reaction time of the response"
)
print(variable_explained)

participant_info <- tribble(
  ~Abbrev, ~Full,
  "age", "-",
  "natlang", "Native language learned",
  "state", "-",
  "parentlang", "Language used by their parents",
  "domlang", "Dominant language", 
  "otherlang", "Other language learned",
  "gender", "-",
  "question- ", "..."
)
print(participant_info)
```

## How many participants does the data have data in total?

Use inline R-code to "print" this number in the markdown text.

```{r}
participants_num <- length(unique(df_all$Hash))
participants_num
```

## Concerning participants' age stats

```{r}
df_all$Age <- as.numeric(as.character(df_all$Value), na.rm = TRUE)
participants_age <- df_all %>% 
  summarize(
    Mean_Age = mean(Age, na.rm = TRUE),
    Min_Age = min(Age, na.rm = TRUE),
    Max_Age = max(Age, na.rm = TRUE),
    Sd_Age = sd(Age, na.rm = TRUE)
  )
print(participants_age)
```

## Reproduce the figure in Figure 1

```{r}
df_raw <- rgn.rt.raw
df_raw %>% spread(rgn, rt)
df_raw$rgn.fix <- NULL
df_raw %>% 
  mutate(condition = expect)
df_raw$expect <- NULL
df_raw
```


```{r}
rt.s.filt |> 
  filter(rgn.fix == 0) |> 
  group_by(Hash, expect) |> 
  summarize(RT = mean(RT, na.rm = TRUE)) |> 
  ggplot(aes(x=expect, y=RT, shape = expect, group = Hash, color = Hash)) +
  geom_line() +
  geom_point(stat = "identity", alpha = .8, size = 2) +
  labs(x = "Condition", y = "Reading Time (msec)") + 
  theme_minimal() +
  theme(legend.position = "none") 
```
```{r}
# package for linear mixed effects
library(lme4)
 # package for p-values from lme4 models
library(lmerTest)
```

```{r}
m_lm <- lm(RT ~ expect, 
           data = filter(rt.s.filt, rgn.fix == 0))
summary(m_lm)
```
```{r}
install.packages("gtsummary")
library(gtsummary)
tbl_regression(m_lm, conf.int = FALSE)
#m_mixed <- lmer(RT ~ expect + (1 | Hash) + (1 + expect | item), 
           #data = filter(rt.s.filt, rgn.fix == 0))
#summary(m_mixed)
#tbl_regression(m_mixed, conf.int = FALSE)
```

```{r}
#m_noun <- lmer(RT ~ expect + (1 | Hash) + (1 + expect | item), 
           #data = filter(rt.s.filt, rgn.fix == 1))
#tbl_regression(m_noun, conf.int = FALSE)
```





